@page "/chatroom/{ID}"
@inject NavigationManager navigationManager
@inject IChatRoomService _chatRoomService
@using Microsoft.AspNetCore.SignalR.Client

@if (!_isValidID)
{
    <p>Error: Incorrect chatID</p>
}
else
{
    <div class="container-name-home">
        <div>
            <span class="room-name">Room: @_chatRoom.Name</span>
            <p>Created :@_chatRoom.CreationTime</p>
        </div>
        <div>
        <DevButton OnClickCallback="@(() => navigationManager.NavigateTo("/chatroom/"))">Return to hub</DevButton>
        </div>
    </div>
    <hr>
    @if (_promptPassword)
    {
        <p>Enter password to continue:</p>
        <input type="text" maxlength="32" @bind="@_password" @bind:event="oninput"/>
        <button type="button" @onclick="@OnPasswordEnter"><span class="oi oi-chat" aria-hidden="true"></span>Submit</button>
    }
    else
    {
        @if (!_isChatting)
        {
            <p>
                Enter your name to start chatting:
            </p>

            <input type="text" maxlength="32" @bind="@_username" @bind:event="oninput" @onkeyup="OnKeyUpUsername" />
            <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

            // Error messages
            @if (_message != null)
            {
                <div class="invalid-feedback">@_message</div>
                <small id="emailHelp" class="form-text text-muted">@_message</small>
            }
        }
        else
        {
            // banner to show current user
            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi oi-person mr-2" aria-hidden="true"></span>
                <span>You are connected as <b>@_username</b></span>
                <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
            </div>
            // display messages
            <div class="scrollbox">
                @foreach (var message in _chatRoom.Messages)
                {
                    @if (message.Deleted) continue;
                    @if (message.MessageType != MessageType.Normal)
                    {

                    }
                    else
                    {
                        <div class="message">
                            <hr>
                            <div class="@(message.IsMine(_username) ? "sent" : "received")">
                                <p class="user">@message.SenderUsername</p>
                                <p class="msg">@((MarkupString)message.Content)</p>
                                <p class="creation-time">@(message.CreationTime)</p>
                                @if (message.IsMine(_username))
                                {
                                    <div class="delete-button-container-left">
                                        <DeleteButton @bind-ChatId="@ID" @bind-MessageId="@message.Id" OnClickCallback="OnDeleteAsync"></DeleteButton>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                <hr />
                <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage" @bind:event="oninput" @onkeyup="OnKeyUpMessage"></textarea>
                <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage, MessageType.Normal))">Send</button>
            </div>
        }
    }
}

@code {
    [Parameter]
    public string ID { get; set; }
    private ChatRoomModel _chatRoom { get; set; }

    private bool _promptPassword;
    private bool _isValidID;
    private bool _isChatting;
    private string _username;
    private string _password;
    private string _message;
    private string _newMessage;
    private string _hubUrl;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (ID.Length != 24) return;
        await SyncWithDbAsync();
        if (_chatRoom != null)
        {
            _isValidID = true;
            if (!string.IsNullOrWhiteSpace(_chatRoom.Password))
            {
                _promptPassword = true;
            }
        }
    }
    private async Task OnKeyUpUsername(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await Chat();
        }
    }
    private async Task OnKeyUpMessage(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SendAsync(_newMessage, MessageType.Normal);
        }
    }
    private void OnPasswordEnter()
    {
        if (_password == _chatRoom.Password)
        {
            _promptPassword = false;
        }
    }
    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }
        try
        {
            _isChatting = true;
            await Task.Delay(1);
            await SyncWithDbAsync();
            string baseUrl = navigationManager.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;
            _hubConnection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();
            _hubConnection.On("Broadcast", SyncWithDbAsync);
            await _hubConnection.StartAsync();
            _username = string.Empty;
        }
        catch(Exception e)
        {
            _message = $"ERRPR: Failed to start chat client: {e.Message}";
            _isChatting = false;

        }
    }

    public async Task OnDeleteAsync()
    {
        await SyncWithDbAsync();
        await _hubConnection.SendAsync("Broadcast");
    }
    public async Task SyncWithDbAsync()
    {
        var result = await _chatRoomService.TryGetChatRoomAsync(ID);
        if (result.Item1)
        {
            _chatRoom = result.Item2;
        }
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (!_isChatting) return;
        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();
        _hubConnection = null;
        _isChatting = false;
    }

    private async Task SendAsync(string message, MessageType messageType)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            var messageObj = new Message(_username, message, messageType);
            await _chatRoomService.AddMessageAsync(ID, messageObj);
            await _hubConnection.SendAsync("Broadcast");
            _newMessage = string.Empty;
        }
    }
}
